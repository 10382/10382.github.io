{"title":"Docker资源使用情况采集脚本","slug":"Docker资源使用情况采集脚本","date":"2019-05-30T08:35:02.000Z","updated":"2019-05-30T13:43:10.140Z","comments":true,"excerpt":"","content":"<blockquote>\n<p>题图画师: <a href=\"http://www.pixiv.net/member.php?id=12296581\" target=\"_blank\" rel=\"noopener\">shnva☯</a> 原图: <a href=\"http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=46840513\" target=\"_blank\" rel=\"noopener\">東方まとめ</a></p>\n</blockquote>\n<blockquote>\n<p>本文中默认以 root 用户进行操作</p>\n</blockquote>\n<h2 id=\"分解-docker-stats-输出\"><a href=\"#分解-docker-stats-输出\" class=\"headerlink\" title=\"分解 docker stats 输出\"></a>分解 <code>docker stats</code> 输出</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ol>\n<li>每次不清屏输出</li>\n<li>通过 <code>,</code> 分隔每个指标</li>\n<li>加上时间戳</li>\n</ol>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>通过将 <code>docker stats</code> 的输出写入文件可以看到每次清屏时都会有 <code>^[[2J^[[H</code> 的神秘字符。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/HTB1bZIVaRSD3KVjSZFq7634bpXa7.png\" alt=\"清屏代码\"></p>\n<p>查阅资料后在 <a href=\"http://www.cplusplus.com/forum/beginner/6917/\" target=\"_blank\" rel=\"noopener\">C++论坛</a> 上找到了这两个ANSI/VT100 终端转义序列的含义</p>\n<blockquote>\n<p><strong>\\x1b[2J</strong> is the code for clearing the screen and set cursor to home.<br><strong>\\x1b[H</strong> is the code for returning the cursor to the home position.</p>\n</blockquote>\n<ul>\n<li><code>\\x1b[2J</code> : 清屏并把光标移动到下一行的起始位置</li>\n<li><code>\\x1b[H</code> : 把光标移动到屏幕顶端起始位置 (不清屏)</li>\n</ul>\n<p>所以我们首先要通过 <code>awk</code> 命令将它们替换掉</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats | awk <span class=\"string\">'&#123;gsub(/\\x1b\\[2J\\x1b\\[H/,\"\"); print&#125;'</span></span><br></pre></td></tr></table></figure>\n<p><code>gsub(/regex/, &quot;replacement&quot;)</code> 是 awk 中的函数，前一项的 <code>regex</code> 部分表示要搜索的部分，可以用正则表达式 (关于正则表达式可以看我 <a href=\"暂未发布\">另一篇博客</a> (暂未发布) )，<code>replacement</code> 部分表示要替换的字符串。</p>\n<p>自此，<code>docker stats</code> 不会再清屏了。</p>\n<p><img src=\"https://ae01.alicdn.com/kf/HTB11u.UaRaE3KVjSZLe760sSFXai.png\" alt=\"gsub效果\"></p>\n<p>但我们不需要每次都输出表头信息，从  <a href=\"https://blog.csdn.net/hu_jinghui/article/details/80199295\" target=\"_blank\" rel=\"noopener\">enchanterblue的博客</a> 获得的灵感，可以通过判断以空格分割的第三个字符串的第一位是不是数字来筛选。(这里也可以通过 <code>docker stats</code> 的参数 <code>--format</code> 中不带 <code>table</code> 来不输出表头)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats | awk <span class=\"string\">'&#123;gsub(/\\x1b\\[2J\\x1b\\[H/,\"\"); if($3 ~ /^[0-9]/)&#123;print&#125;&#125;'</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>awk</code> 命令中 <code>~</code> 表示匹配，同样可以用正则表达式来匹配。</p>\n<p>输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                    --                  0.00%               0B / 0B             0.00%               0B / 0B             0B / 0B             0</span><br><span class=\"line\">                    --                  0.00%               0B / 0B             0.00%               0B / 0B             0B / 0B             0</span><br><span class=\"line\">c413023bf479        vigilant_thompson   0.00%               256KiB / 1.795GiB   0.01%               266B / 0B           0B / 0B             1</span><br><span class=\"line\">c413023bf479        vigilant_thompson   0.00%               256KiB / 1.795GiB   0.01%               266B / 0B           0B / 0B             1</span><br></pre></td></tr></table></figure>\n<p>可以发现，docker 运行前无效的空数据也匹配出来了，那我们就换一个与之不同的匹配项。比如最后一项 <code>PIDS</code> (表示该 docker 运行的进程数量) 在无效时的值为0，那我们就匹配起始位为1～9，避免了直接设置 <code>!=0</code> 时又会输出表头的问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats | awk <span class=\"string\">'&#123;gsub(/\\x1b\\[2J\\x1b\\[H/,\"\"); if($14 ~ /^[1-9]/)&#123;print&#125;&#125;'</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ae01.alicdn.com/kf/HTB1oes3aHys3KVjSZFn760FzpXaF.png\" alt=\"去除表头\"></p>\n<p>接下来就只要格式化输出并加上时间戳就大功告成了 (๑•̀ㅂ•́)و✧</p>\n<ul>\n<li><code>BEGIN{}</code> 表示在处理字符流之前的操作，这里输出了自定义的表头</li>\n<li><code>printf()</code> 可以格式化输出字段</li>\n<li><code>system()</code> 表示调用 shell 命令</li>\n<li><code>date &#39;+%s&#39;</code> 表示输出「从1970年1月1日00:00:00 UTC 到目前为止的秒数」</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats | awk <span class=\"string\">'BEGIN&#123;print \"id,cpu%,mem%,mem_usage,mem_limit,net_in,net_out,block_in,block_out,epoch\"&#125;&#123;gsub(/\\x1b\\[2J\\x1b\\[H/,\"\"); if($14 ~ /^[1-9]/)&#123;printf(\"%s,%s,%s,%s,%s,%s,%s,%s,%s,\",$1,$3,$7,$4,$6,$8,$10,$11,$13); system(\"date '</span>+%s<span class=\"string\">'\")&#125;&#125;'</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ae01.alicdn.com/kf/HTB1pfZ0aRGw3KVjSZFD760WEpXaZ.png\" alt=\"格式化输出\"></p>\n<h2 id=\"编写每日采集脚本\"><a href=\"#编写每日采集脚本\" class=\"headerlink\" title=\"编写每日采集脚本\"></a>编写每日采集脚本</h2><h3 id=\"需求-1\"><a href=\"#需求-1\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>以天为单位存储到文件中，方便之后导入数据库。</p>\n<h3 id=\"脚本内容\"><a href=\"#脚本内容\" class=\"headerlink\" title=\"脚本内容\"></a>脚本内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 `cat pid_dockerstats.txt`</span><br><span class=\"line\">today_file=<span class=\"string\">\"/home/lidata/Data/docker-\"</span>`date <span class=\"string\">'+%Y%m%d'</span>`<span class=\"string\">\".csv\"</span></span><br><span class=\"line\">nohup docker stats | awk <span class=\"string\">'BEGIN&#123;print \"id,cpu%,mem%,mem_usage,mem_limit,net_in,net_out,block_in,block_out,epoch\"&#125;&#123;gsub(/\\x1b\\[2J\\x1b\\[H/,\"\"); if($14 ~ /^[1-9]/)&#123;printf(\"%s,%s,%s,%s,%s,%s,%s,%s,%s,\",$1,$3,$7,$4,$6,$8,$10,$11,$13); system(\"date '</span>+%s<span class=\"string\">'\")&#125;&#125;'</span> &gt; <span class=\"variable\">$today_file</span> 2&gt;&amp;1 &amp; <span class=\"built_in\">echo</span> $! &gt; pid_dockerstats.txt</span><br></pre></td></tr></table></figure>\n<ol>\n<li>通过 <code>kill</code> 命令杀掉昨天的采集进程<ul>\n<li><code>pid_dockerstats.txt</code> 中记录了昨天采集进程的 PID</li>\n</ul>\n</li>\n<li>以当天的日期命名文件<ul>\n<li>通过 <code>date &#39;+%Y%m%d&#39;</code> 获取年月日，并和数据存储路径拼接存储到变量 <code>today_file</code> 中</li>\n</ul>\n</li>\n<li>创建今天的采集进程并记录下进程号<ul>\n<li><code>nohup ... &amp;</code> 表示不挂断运行 (<code>nohup</code>)，并在后台运行 (<code>&amp;</code>)</li>\n<li><code>&gt;&gt; $today_file 2&gt;&amp;1</code> 是将标准错误 (2) 重定向到标准输出 (&amp;1)，标准输出再覆写到 <code>$today_file</code> 中</li>\n<li><code>$!</code> 表示 shell 最后运行的后台进程的进程号</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"测试脚本\"><a href=\"#测试脚本\" class=\"headerlink\" title=\"测试脚本\"></a>测试脚本</h3><ol>\n<li>执行除 <code>kill</code> 以外的两行内容，跑一个 docker 程序试一下，然后 <code>cat $today_file</code> 一下，确认是否已有数据写入文件。 </li>\n</ol>\n<p><img src=\"https://ae01.alicdn.com/kf/HTB111s3aHys3KVjSZFn760FzpXaI.png\" alt=\"脚本测试\"></p>\n<ol start=\"2\">\n<li><p>如果有，先执行 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -p `cat cat pid_dockerstats.txt`</span><br></pre></td></tr></table></figure>\n<p>记下进程号后执行直接 <code>sh /home/lidata/docker_stats.sh</code>，会提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]+  Killed                  nohup docker stats | awk <span class=\"string\">'BEGIN&#123;print \"id,cpu%,mem%,mem_usage,mem_limit,net_in,net_out,block_in,block_out,epoch\"&#125;&#123;gsub(/\\x1b\\[2J\\x1b\\[H/,\"\"); if($14 ~ /^[1-9]/)&#123;printf(\"%s,%s,%s,%s,%s,%s,%s,%s,%s,\",$1,$3,$7,$4,$6,$8,$10,$11,$13); system(\"date '</span>+%s<span class=\"string\">'\")&#125;&#125;'</span> &gt;&gt; <span class=\"variable\">$today_file</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>再执行 <code>ps -p 记下的进程号</code>，发现已没有该进程号的程序，脚本运行成功～</p>\n</li>\n</ol>\n<h2 id=\"设置脚本定时执行\"><a href=\"#设置脚本定时执行\" class=\"headerlink\" title=\"设置脚本定时执行\"></a>设置脚本定时执行</h2><blockquote>\n<p>Centos 下定时程序服务名为 <code>crond</code>，Ubuntu 下名为 <code>cron</code>，本例默认使用 <code>crond</code>，请按需更改。</p>\n</blockquote>\n<p>查看 <code>corn</code> 是否运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep cron</span><br></pre></td></tr></table></figure>\n<p>输出包含 <code>/usr/sbin/cron</code> 的项说明正在运行。</p>\n<p>或通过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status crond</span><br></pre></td></tr></table></figure>\n<p><code>Active:</code> 项显示 <code>active (running)</code> 说明正在运行。</p>\n<p>若未运行，可通过 <code>systemctl start crond</code> 启动。</p>\n<p>编辑 <code>/etc/crontab</code> 文件，写入定时执行的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0  0  *  *  * root       sh /home/lidata/docker_stats.sh</span><br></pre></td></tr></table></figure>\n<p>表示每天0点以 root 用户执行 docker 指标采集脚本 <code>docker_stats.sh</code></p>\n<p>重启 <code>corn</code> 服务使新命令生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart crond</span><br></pre></td></tr></table></figure>\n<p>参考链接：</p>\n<ul>\n<li><p><a href=\"https://zhidao.baidu.com/question/2016447094999052748.html?hideOtherAnswer=true&amp;newAnswer=1\" target=\"_blank\" rel=\"noopener\">awk删除指定字符</a></p>\n</li>\n<li><p><a href=\"https://askubuntu.com/questions/20414/find-and-replace-text-within-a-file-using-commands\" target=\"_blank\" rel=\"noopener\">Find and replace text within a file using commands</a></p>\n</li>\n<li><p><a href=\"http://www.cplusplus.com/forum/beginner/6917/\" target=\"_blank\" rel=\"noopener\">What does this code actually mean?</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/37774983/clearing-the-screen-by-printing-a-character\" target=\"_blank\" rel=\"noopener\">Clearing the screen by printing a character?</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/hu_jinghui/article/details/80199295\" target=\"_blank\" rel=\"noopener\">docker stats监控容器资源脚本</a></p>\n</li>\n<li><p><a href=\"http://c.biancheng.net/view/1114.html\" target=\"_blank\" rel=\"noopener\">Shell字符串拼接（连接、合并）</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/jinxiao-pu/p/9131057.html\" target=\"_blank\" rel=\"noopener\">nohup 详解</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/weixin_33705053/article/details/88243186\" target=\"_blank\" rel=\"noopener\">获得nohup后台运行进程的PID</a></p>\n</li>\n</ul>\n<p>本作品采用<a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\" rel=\"noopener\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>\n","thumbnail":"https://ae01.alicdn.com/kf/HTB1VYxsa8GE3KVjSZFhq6AkaFXaw.jpg","categories":[{"name":"能效预测","path":"api/categories/能效预测.json"},{"name":"Shell","path":"api/categories/Shell.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Metrics","path":"api/tags/Metrics.json"}]}